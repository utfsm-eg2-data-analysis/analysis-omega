#ifndef REDUCTOR_HXX
#define REDUCTOR_HXX

#ifndef UX_HXX
#include "UX.hxx"
#endif

#ifndef HEADERS_HXX
#include "Headers.hxx"
#endif

#ifndef GSTTREE_H
#include "GSTtree.h"
#endif

void SetParticleBranches_Input(TChain* chain, sim_p& sp) {
  // electron (46)
  chain->SetBranchAddress("Q2", &sp.Q2);
  chain->SetBranchAddress("W", &sp.W);
  chain->SetBranchAddress("Nu", &sp.Nu);
  chain->SetBranchAddress("Xb", &sp.Xb);
  chain->SetBranchAddress("Yb", &sp.Yb);
  chain->SetBranchAddress("vxe", &sp.vxe);
  chain->SetBranchAddress("vye", &sp.vye);
  chain->SetBranchAddress("vze", &sp.vze);
  chain->SetBranchAddress("SectorEl", &sp.SectorEl);
  chain->SetBranchAddress("TargType", &sp.TargType);
  chain->SetBranchAddress("Pex", &sp.Pex);
  chain->SetBranchAddress("Pey", &sp.Pey);
  chain->SetBranchAddress("Pez", &sp.Pez);
  chain->SetBranchAddress("Pe", &sp.Pe);
  chain->SetBranchAddress("BettaEl", &sp.BettaEl);
  chain->SetBranchAddress("Etote", &sp.Etote);
  chain->SetBranchAddress("Eine", &sp.Eine);
  chain->SetBranchAddress("Eoute", &sp.Eoute);
  chain->SetBranchAddress("vxec", &sp.vxec);
  chain->SetBranchAddress("vyec", &sp.vyec);
  chain->SetBranchAddress("vzec", &sp.vzec);
  chain->SetBranchAddress("XECe", &sp.XECe);
  chain->SetBranchAddress("YECe", &sp.YECe);
  chain->SetBranchAddress("ZECe", &sp.ZECe);
  chain->SetBranchAddress("PhiLabEl", &sp.PhiLabEl);
  chain->SetBranchAddress("ThetaLabEl", &sp.ThetaLabEl);
  chain->SetBranchAddress("StatDCEl", &sp.StatDCEl);
  chain->SetBranchAddress("DCStatusEl", &sp.DCStatusEl);
  chain->SetBranchAddress("StatECEl", &sp.StatECEl);
  chain->SetBranchAddress("ECStatusEl", &sp.ECStatusEl);
  chain->SetBranchAddress("TimeECEl", &sp.TimeECEl);
  chain->SetBranchAddress("PathECEl", &sp.PathECEl);
  chain->SetBranchAddress("Chi2ECEl", &sp.Chi2ECEl);
  chain->SetBranchAddress("StatSCEl", &sp.StatSCEl);
  chain->SetBranchAddress("SCStatusEl", &sp.SCStatusEl);
  chain->SetBranchAddress("TimeSCEl", &sp.TimeSCEl);
  chain->SetBranchAddress("PathSCEl", &sp.PathSCEl);
  chain->SetBranchAddress("StatCCEl", &sp.StatCCEl);
  chain->SetBranchAddress("CCStatusEl", &sp.CCStatusEl);
  chain->SetBranchAddress("NpheEl", &sp.NpheEl);
  chain->SetBranchAddress("Chi2CCEl", &sp.Chi2CCEl);
  chain->SetBranchAddress("StatusEl", &sp.StatusEl);
  chain->SetBranchAddress("NRowsDCEl", &sp.NRowsDCEl);
  chain->SetBranchAddress("NRowsECEl", &sp.NRowsECEl);
  chain->SetBranchAddress("NRowsSCEl", &sp.NRowsSCEl);
  chain->SetBranchAddress("NRowsCCEl", &sp.NRowsCCEl);
  // particle (49)
  chain->SetBranchAddress("Eh", &sp.Eh);
  chain->SetBranchAddress("Zh", &sp.Zh);
  chain->SetBranchAddress("ThetaPQ", &sp.ThetaPQ);
  chain->SetBranchAddress("Pt2", &sp.Pt2);
  chain->SetBranchAddress("Pl2", &sp.Pl2);
  chain->SetBranchAddress("PhiPQ", &sp.PhiPQ);
  chain->SetBranchAddress("Mx2", &sp.Mx2);
  chain->SetBranchAddress("T", &sp.T);
  chain->SetBranchAddress("PhiLab", &sp.PhiLab);
  chain->SetBranchAddress("ThetaLab", &sp.ThetaLab);
  chain->SetBranchAddress("vxh", &sp.vxh);
  chain->SetBranchAddress("vyh", &sp.vyh);
  chain->SetBranchAddress("vzh", &sp.vzh);
  chain->SetBranchAddress("Sector", &sp.Sector);
  chain->SetBranchAddress("Px", &sp.Px);
  chain->SetBranchAddress("Py", &sp.Py);
  chain->SetBranchAddress("Pz", &sp.Pz);
  chain->SetBranchAddress("P", &sp.P);
  chain->SetBranchAddress("Betta", &sp.Betta);
  chain->SetBranchAddress("Mass2", &sp.Mass2);
  chain->SetBranchAddress("Etot", &sp.Etot);
  chain->SetBranchAddress("Ein", &sp.Ein);
  chain->SetBranchAddress("Eout", &sp.Eout);
  chain->SetBranchAddress("XEC", &sp.XEC);
  chain->SetBranchAddress("YEC", &sp.YEC);
  chain->SetBranchAddress("ZEC", &sp.ZEC);
  chain->SetBranchAddress("pid", &sp.pid);
  chain->SetBranchAddress("T4", &sp.T4);
  chain->SetBranchAddress("deltaZ", &sp.deltaZ);
  chain->SetBranchAddress("StatDC", &sp.StatDC);
  chain->SetBranchAddress("DCStatus", &sp.DCStatus);
  chain->SetBranchAddress("StatEC", &sp.StatEC);
  chain->SetBranchAddress("ECStatus", &sp.ECStatus);
  chain->SetBranchAddress("TimeEC", &sp.TimeEC);
  chain->SetBranchAddress("PathEC", &sp.PathEC);
  chain->SetBranchAddress("Chi2EC", &sp.Chi2EC);
  chain->SetBranchAddress("StatSC", &sp.StatSC);
  chain->SetBranchAddress("SCStatus", &sp.SCStatus);
  chain->SetBranchAddress("TimeSC", &sp.TimeSC);
  chain->SetBranchAddress("PathSC", &sp.PathSC);
  chain->SetBranchAddress("StatCC", &sp.StatCC);
  chain->SetBranchAddress("CCStatus", &sp.CCStatus);
  chain->SetBranchAddress("Nphe", &sp.Nphe);
  chain->SetBranchAddress("Chi2CC", &sp.Chi2CC);
  chain->SetBranchAddress("Status", &sp.Status);
  chain->SetBranchAddress("NRowsDC", &sp.NRowsDC);
  chain->SetBranchAddress("NRowsEC", &sp.NRowsEC);
  chain->SetBranchAddress("NRowsSC", &sp.NRowsSC);
  chain->SetBranchAddress("NRowsCC", &sp.NRowsCC);
  // event (1)
  chain->SetBranchAddress("evnt", &sp.evnt);
  if (gDataKind == "sim") {
    // gsim electron (17)
    chain->SetBranchAddress("mc_Q2", &sp.mc_Q2);
    chain->SetBranchAddress("mc_W", &sp.mc_W);
    chain->SetBranchAddress("mc_Nu", &sp.mc_Nu);
    chain->SetBranchAddress("mc_Xb", &sp.mc_Xb);
    chain->SetBranchAddress("mc_Yb", &sp.mc_Yb);
    chain->SetBranchAddress("mc_vxe", &sp.mc_vxe);
    chain->SetBranchAddress("mc_vye", &sp.mc_vye);
    chain->SetBranchAddress("mc_vze", &sp.mc_vze);
    chain->SetBranchAddress("mc_SectorEl", &sp.mc_SectorEl);
    chain->SetBranchAddress("mc_TargType", &sp.mc_TargType);
    chain->SetBranchAddress("mc_Pex", &sp.mc_Pex);
    chain->SetBranchAddress("mc_Pey", &sp.mc_Pey);
    chain->SetBranchAddress("mc_Pez", &sp.mc_Pez);
    chain->SetBranchAddress("mc_Pe", &sp.mc_Pe);
    chain->SetBranchAddress("mc_BettaEl", &sp.mc_BettaEl);
    chain->SetBranchAddress("mc_ThetaLabEl", &sp.mc_ThetaLabEl);
    chain->SetBranchAddress("mc_PhiLabEl", &sp.mc_PhiLabEl);
    // gsim particle (22)
    chain->SetBranchAddress("mc_Eh", &sp.mc_Eh);
    chain->SetBranchAddress("mc_Zh", &sp.mc_Zh);
    chain->SetBranchAddress("mc_ThetaPQ", &sp.mc_ThetaPQ);
    chain->SetBranchAddress("mc_Pt2", &sp.mc_Pt2);
    chain->SetBranchAddress("mc_Pl2", &sp.mc_Pl2);
    chain->SetBranchAddress("mc_PhiPQ", &sp.mc_PhiPQ);
    chain->SetBranchAddress("mc_Mx2", &sp.mc_Mx2);
    chain->SetBranchAddress("mc_T", &sp.mc_T);
    chain->SetBranchAddress("mc_ThetaLab", &sp.mc_ThetaLab);
    chain->SetBranchAddress("mc_PhiLab", &sp.mc_PhiLab);
    chain->SetBranchAddress("mc_vxh", &sp.mc_vxh);
    chain->SetBranchAddress("mc_vyh", &sp.mc_vyh);
    chain->SetBranchAddress("mc_vzh", &sp.mc_vzh);
    chain->SetBranchAddress("mc_Sector", &sp.mc_Sector);
    chain->SetBranchAddress("mc_Px", &sp.mc_Px);
    chain->SetBranchAddress("mc_Py", &sp.mc_Py);
    chain->SetBranchAddress("mc_Pz", &sp.mc_Pz);
    chain->SetBranchAddress("mc_P", &sp.mc_P);
    chain->SetBranchAddress("mc_Betta", &sp.mc_Betta);
    chain->SetBranchAddress("mc_Mass2", &sp.mc_Mass2);
    chain->SetBranchAddress("mc_pid", &sp.mc_pid);
    chain->SetBranchAddress("mc_deltaZ", &sp.mc_deltaZ);
  }
}

void SetParticleBranches_Output(TTree* tree, sim_p& sp) {
  // electron (46)
  tree->Branch("Q2", &sp.Q2);
  tree->Branch("W", &sp.W);
  tree->Branch("Nu", &sp.Nu);
  tree->Branch("Xb", &sp.Xb);
  tree->Branch("Yb", &sp.Yb);
  tree->Branch("vxe", &sp.vxe);
  tree->Branch("vye", &sp.vye);
  tree->Branch("vze", &sp.vze);
  tree->Branch("SectorEl", &sp.SectorEl);
  tree->Branch("TargType", &sp.TargType);
  tree->Branch("Pex", &sp.Pex);
  tree->Branch("Pey", &sp.Pey);
  tree->Branch("Pez", &sp.Pez);
  tree->Branch("Pe", &sp.Pe);
  tree->Branch("BettaEl", &sp.BettaEl);
  tree->Branch("Etote", &sp.Etote);
  tree->Branch("Eine", &sp.Eine);
  tree->Branch("Eoute", &sp.Eoute);
  tree->Branch("vxec", &sp.vxec);
  tree->Branch("vyec", &sp.vyec);
  tree->Branch("vzec", &sp.vzec);
  tree->Branch("XECe", &sp.XECe);
  tree->Branch("YECe", &sp.YECe);
  tree->Branch("ZECe", &sp.ZECe);
  tree->Branch("PhiLabEl", &sp.PhiLabEl);
  tree->Branch("ThetaLabEl", &sp.ThetaLabEl);
  tree->Branch("StatDCEl", &sp.StatDCEl);
  tree->Branch("DCStatusEl", &sp.DCStatusEl);
  tree->Branch("StatECEl", &sp.StatECEl);
  tree->Branch("ECStatusEl", &sp.ECStatusEl);
  tree->Branch("TimeECEl", &sp.TimeECEl);
  tree->Branch("PathECEl", &sp.PathECEl);
  tree->Branch("Chi2ECEl", &sp.Chi2ECEl);
  tree->Branch("StatSCEl", &sp.StatSCEl);
  tree->Branch("SCStatusEl", &sp.SCStatusEl);
  tree->Branch("TimeSCEl", &sp.TimeSCEl);
  tree->Branch("PathSCEl", &sp.PathSCEl);
  tree->Branch("StatCCEl", &sp.StatCCEl);
  tree->Branch("CCStatusEl", &sp.CCStatusEl);
  tree->Branch("NpheEl", &sp.NpheEl);
  tree->Branch("Chi2CCEl", &sp.Chi2CCEl);
  tree->Branch("StatusEl", &sp.StatusEl);
  tree->Branch("NRowsDCEl", &sp.NRowsDCEl);
  tree->Branch("NRowsECEl", &sp.NRowsECEl);
  tree->Branch("NRowsSCEl", &sp.NRowsSCEl);
  tree->Branch("NRowsCCEl", &sp.NRowsCCEl);
  // particle (49)
  tree->Branch("Eh", &sp.Eh);
  tree->Branch("Zh", &sp.Zh);
  tree->Branch("ThetaPQ", &sp.ThetaPQ);
  tree->Branch("Pt2", &sp.Pt2);
  tree->Branch("Pl2", &sp.Pl2);
  tree->Branch("PhiPQ", &sp.PhiPQ);
  tree->Branch("Mx2", &sp.Mx2);
  tree->Branch("T", &sp.T);
  tree->Branch("PhiLab", &sp.PhiLab);
  tree->Branch("ThetaLab", &sp.ThetaLab);
  tree->Branch("vxh", &sp.vxh);
  tree->Branch("vyh", &sp.vyh);
  tree->Branch("vzh", &sp.vzh);
  tree->Branch("Sector", &sp.Sector);
  tree->Branch("Px", &sp.Px);
  tree->Branch("Py", &sp.Py);
  tree->Branch("Pz", &sp.Pz);
  tree->Branch("P", &sp.P);
  tree->Branch("Betta", &sp.Betta);
  tree->Branch("Mass2", &sp.Mass2);
  tree->Branch("Etot", &sp.Etot);
  tree->Branch("Ein", &sp.Ein);
  tree->Branch("Eout", &sp.Eout);
  tree->Branch("XEC", &sp.XEC);
  tree->Branch("YEC", &sp.YEC);
  tree->Branch("ZEC", &sp.ZEC);
  tree->Branch("pid", &sp.pid);
  tree->Branch("T4", &sp.T4);
  tree->Branch("deltaZ", &sp.deltaZ);
  tree->Branch("StatDC", &sp.StatDC);
  tree->Branch("DCStatus", &sp.DCStatus);
  tree->Branch("StatEC", &sp.StatEC);
  tree->Branch("ECStatus", &sp.ECStatus);
  tree->Branch("TimeEC", &sp.TimeEC);
  tree->Branch("PathEC", &sp.PathEC);
  tree->Branch("Chi2EC", &sp.Chi2EC);
  tree->Branch("StatSC", &sp.StatSC);
  tree->Branch("SCStatus", &sp.SCStatus);
  tree->Branch("TimeSC", &sp.TimeSC);
  tree->Branch("PathSC", &sp.PathSC);
  tree->Branch("StatCC", &sp.StatCC);
  tree->Branch("CCStatus", &sp.CCStatus);
  tree->Branch("Nphe", &sp.Nphe);
  tree->Branch("Chi2CC", &sp.Chi2CC);
  tree->Branch("Status", &sp.Status);
  tree->Branch("NRowsDC", &sp.NRowsDC);
  tree->Branch("NRowsEC", &sp.NRowsEC);
  tree->Branch("NRowsSC", &sp.NRowsSC);
  tree->Branch("NRowsCC", &sp.NRowsCC);
  // event (1)
  tree->Branch("evnt", &sp.evnt);
  if (gDataKind == "sim") {
    // gsim electron (17)
    tree->Branch("mc_Q2", &sp.mc_Q2);
    tree->Branch("mc_W", &sp.mc_W);
    tree->Branch("mc_Nu", &sp.mc_Nu);
    tree->Branch("mc_Xb", &sp.mc_Xb);
    tree->Branch("mc_Yb", &sp.mc_Yb);
    tree->Branch("mc_vxe", &sp.mc_vxe);
    tree->Branch("mc_vye", &sp.mc_vye);
    tree->Branch("mc_vze", &sp.mc_vze);
    tree->Branch("mc_SectorEl", &sp.mc_SectorEl);
    tree->Branch("mc_TargType", &sp.mc_TargType);
    tree->Branch("mc_Pex", &sp.mc_Pex);
    tree->Branch("mc_Pey", &sp.mc_Pey);
    tree->Branch("mc_Pez", &sp.mc_Pez);
    tree->Branch("mc_Pe", &sp.mc_Pe);
    tree->Branch("mc_BettaEl", &sp.mc_BettaEl);
    tree->Branch("mc_ThetaLabEl", &sp.mc_ThetaLabEl);
    tree->Branch("mc_PhiLabEl", &sp.mc_PhiLabEl);
    // gsim particle (22)
    tree->Branch("mc_Eh", &sp.mc_Eh);
    tree->Branch("mc_Zh", &sp.mc_Zh);
    tree->Branch("mc_ThetaPQ", &sp.mc_ThetaPQ);
    tree->Branch("mc_Pt2", &sp.mc_Pt2);
    tree->Branch("mc_Pl2", &sp.mc_Pl2);
    tree->Branch("mc_PhiPQ", &sp.mc_PhiPQ);
    tree->Branch("mc_Mx2", &sp.mc_Mx2);
    tree->Branch("mc_T", &sp.mc_T);
    tree->Branch("mc_ThetaLab", &sp.mc_ThetaLab);
    tree->Branch("mc_PhiLab", &sp.mc_PhiLab);
    tree->Branch("mc_vxh", &sp.mc_vxh);
    tree->Branch("mc_vyh", &sp.mc_vyh);
    tree->Branch("mc_vzh", &sp.mc_vzh);
    tree->Branch("mc_Sector", &sp.mc_Sector);
    tree->Branch("mc_Px", &sp.mc_Px);
    tree->Branch("mc_Py", &sp.mc_Py);
    tree->Branch("mc_Pz", &sp.mc_Pz);
    tree->Branch("mc_P", &sp.mc_P);
    tree->Branch("mc_Betta", &sp.mc_Betta);
    tree->Branch("mc_Mass2", &sp.mc_Mass2);
    tree->Branch("mc_pid", &sp.mc_pid);
    tree->Branch("mc_deltaZ", &sp.mc_deltaZ);
  }
}

#endif
